import { ProfileService } from 'src/profiles/profiles.service';
import { CreateUserDto } from './dto/create-user.dto';
import { GetAllByRoleDto } from './dto/get-all-by-role.dto';
import { UpdateUserDto } from './dto/update-user.dto';
import { User } from './users.model';
export declare class UsersService {
    private userRepository;
    private profilesService;
    constructor(userRepository: typeof User, profilesService: ProfileService);
    createUser(dto: CreateUserDto): Promise<User>;
    getAllUsers(): Promise<User[]>;
    getAllUsersByRole(dto: GetAllByRoleDto): Promise<User[]>;
    updateUser(dto: UpdateUserDto, id: number): Promise<{
        profile: import("../profiles/profiles.model").Profile[];
        length: number;
        toString(): string;
        toLocaleString(): string;
        pop(): User;
        push(...items: User[]): number;
        concat(...items: ConcatArray<User>[]): User[];
        concat(...items: (User | ConcatArray<User>)[]): User[];
        join(separator?: string): string;
        reverse(): User[];
        shift(): User;
        slice(start?: number, end?: number): User[];
        sort(compareFn?: (a: User, b: User) => number): User[];
        splice(start: number, deleteCount?: number): User[];
        splice(start: number, deleteCount: number, ...items: User[]): User[];
        unshift(...items: User[]): number;
        indexOf(searchElement: User, fromIndex?: number): number;
        lastIndexOf(searchElement: User, fromIndex?: number): number;
        every<S extends User>(predicate: (value: User, index: number, array: User[]) => value is S, thisArg?: any): this is S[];
        every(predicate: (value: User, index: number, array: User[]) => unknown, thisArg?: any): boolean;
        some(predicate: (value: User, index: number, array: User[]) => unknown, thisArg?: any): boolean;
        forEach(callbackfn: (value: User, index: number, array: User[]) => void, thisArg?: any): void;
        map<U>(callbackfn: (value: User, index: number, array: User[]) => U, thisArg?: any): U[];
        filter<S_1 extends User>(predicate: (value: User, index: number, array: User[]) => value is S_1, thisArg?: any): S_1[];
        filter(predicate: (value: User, index: number, array: User[]) => unknown, thisArg?: any): User[];
        reduce(callbackfn: (previousValue: User, currentValue: User, currentIndex: number, array: User[]) => User): User;
        reduce(callbackfn: (previousValue: User, currentValue: User, currentIndex: number, array: User[]) => User, initialValue: User): User;
        reduce<U_1>(callbackfn: (previousValue: U_1, currentValue: User, currentIndex: number, array: User[]) => U_1, initialValue: U_1): U_1;
        reduceRight(callbackfn: (previousValue: User, currentValue: User, currentIndex: number, array: User[]) => User): User;
        reduceRight(callbackfn: (previousValue: User, currentValue: User, currentIndex: number, array: User[]) => User, initialValue: User): User;
        reduceRight<U_2>(callbackfn: (previousValue: U_2, currentValue: User, currentIndex: number, array: User[]) => U_2, initialValue: U_2): U_2;
        find<S_2 extends User>(predicate: (this: void, value: User, index: number, obj: User[]) => value is S_2, thisArg?: any): S_2;
        find(predicate: (value: User, index: number, obj: User[]) => unknown, thisArg?: any): User;
        findIndex(predicate: (value: User, index: number, obj: User[]) => unknown, thisArg?: any): number;
        fill(value: User, start?: number, end?: number): User[];
        copyWithin(target: number, start: number, end?: number): User[];
        entries(): IterableIterator<[number, User]>;
        keys(): IterableIterator<number>;
        values(): IterableIterator<User>;
        includes(searchElement: User, fromIndex?: number): boolean;
        flatMap<U_3, This = undefined>(callback: (this: This, value: User, index: number, array: User[]) => U_3 | readonly U_3[], thisArg?: This): U_3[];
        flat<A, D extends number = 1>(this: A, depth?: D): FlatArray<A, D>[];
        [Symbol.iterator](): IterableIterator<User>;
        [Symbol.unscopables](): {
            copyWithin: boolean;
            entries: boolean;
            fill: boolean;
            find: boolean;
            findIndex: boolean;
            keys: boolean;
            values: boolean;
        };
        at(index: number): User;
    }>;
    deleteUser(id: number): Promise<void>;
}
